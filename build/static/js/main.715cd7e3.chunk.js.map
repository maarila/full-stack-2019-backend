{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","services_persons","axios","get","then","response","data","personObject","post","id","delete","concat","put","Header","_ref","text","react_default","a","createElement","Subheader","_ref2","Persons","_ref3","persons","handleClick","map","person","App_Person","key","name","Person","_ref4","number","onClick","Filter","_ref5","value","handleChange","onChange","Notification","_ref6","message","classToUse","className","PersonForm","_ref7","submit","nameValue","nameChange","numberValue","numberChange","onSubmit","type","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","newFilter","setNewFilter","_useState9","_useState10","notification","setNotification","_useState11","_useState12","errorMessage","setErrorMessage","useEffect","personService","removePerson","personToRemove","find","window","confirm","filter","setTimeout","App_Header","App_Notification","App_Filter","event","target","App_Subheader","App_PersonForm","preventDefault","personExists","updatedPerson","catch","error","alert","length","App_Persons","toLowerCase","includes","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6NAEMA,EAAU,oCAsBDC,EApBA,WAEb,OADgBC,IAAMC,IAAIH,GACXI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAkB5BL,EAfA,SAAAM,GAEb,OADgBL,IAAMM,KAAKR,EAASO,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAa5BL,EAVA,SAAAQ,GAEb,OADgBP,IAAMQ,OAAN,GAAAC,OAAgBX,EAAhB,KAAAW,OAA2BF,IAC5BL,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ5BL,EALA,SAAAM,GAEb,OADgBL,IAAMU,IAAN,GAAAD,OAAaX,EAAb,KAAAW,OAAwBJ,EAAaE,IAAMF,GAC5CH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QClBrCO,EAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAAcC,EAAAC,EAAAC,cAAA,UAAKH,IAE5BI,EAAY,SAAAC,GAAA,IAAGL,EAAHK,EAAGL,KAAH,OAAcC,EAAAC,EAAAC,cAAA,UAAKH,IAE/BM,EAAU,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,YAC1B,OAAOD,EAAQE,IAAI,SAAAC,GAAM,OACvBV,EAAAC,EAAAC,cAACS,EAAD,CAAQC,IAAKF,EAAOG,KAAMH,OAAQA,EAAQF,YAAaA,OAIrDM,EAAS,SAAAC,GAAA,IAAGL,EAAHK,EAAGL,OAAQF,EAAXO,EAAWP,YAAX,OACbR,EAAAC,EAAAC,cAAA,WACGQ,EAAOG,KADV,IACiBH,EAAOM,OACtBhB,EAAAC,EAAAC,cAAA,UAAQe,QAAS,kBAAMT,EAAYE,EAAOjB,MAA1C,YAIEyB,EAAS,SAAAC,GAAmC,IAAhCpB,EAAgCoB,EAAhCpB,KAAMqB,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,aAC7B,OACErB,EAAAC,EAAAC,cAAA,WACGH,EADH,IACSC,EAAAC,EAAAC,cAAA,SAAOkB,MAAOA,EAAOE,SAAUD,MAKtCE,EAAe,SAAAC,GAA6B,IAA1BC,EAA0BD,EAA1BC,QAASC,EAAiBF,EAAjBE,WAC/B,OAAgB,OAAZD,EACK,KAGFzB,EAAAC,EAAAC,cAAA,OAAKyB,UAAWD,GAAaD,IAGhCG,EAAa,SAAAC,GAQb,IAPJhB,EAOIgB,EAPJhB,KACAG,EAMIa,EANJb,OACAc,EAKID,EALJC,OACAC,EAIIF,EAJJE,UACAC,EAGIH,EAHJG,WACAC,EAEIJ,EAFJI,YACAC,EACIL,EADJK,aAEA,OACElC,EAAAC,EAAAC,cAAA,QAAMiC,SAAUL,GACd9B,EAAAC,EAAAC,cAAA,WACGW,EADH,IACSb,EAAAC,EAAAC,cAAA,SAAOkB,MAAOW,EAAWT,SAAUU,KAE5ChC,EAAAC,EAAAC,cAAA,WACGc,EADH,IACWhB,EAAAC,EAAAC,cAAA,SAAOkB,MAAOa,EAAaX,SAAUY,KAEhDlC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQkC,KAAK,UAAb,kBA8IOC,EAxIH,WAAM,IAAAC,EACcC,mBAAS,IADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACT/B,EADSiC,EAAA,GACAG,EADAH,EAAA,GAAAI,EAEcL,mBAAS,IAFvBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAETE,EAFSD,EAAA,GAEAE,EAFAF,EAAA,GAAAG,EAGkBT,mBAAS,IAH3BU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAGTE,EAHSD,EAAA,GAGEE,EAHFF,EAAA,GAAAG,EAIkBb,mBAAS,IAJ3Bc,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAITE,EAJSD,EAAA,GAIEE,EAJFF,EAAA,GAAAG,EAKwBjB,mBAAS,MALjCkB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAKTE,EALSD,EAAA,GAKKE,EALLF,EAAA,GAAAG,EAMwBrB,mBAAS,MANjCsB,EAAApB,OAAAC,EAAA,EAAAD,CAAAmB,EAAA,GAMTE,EANSD,EAAA,GAMKE,EANLF,EAAA,GAQhBG,oBAAU,WACRC,IAAuB7E,KAAK,SAAAC,GAC1BsD,EAAWtD,MAEZ,IAEH,IAuEM6E,EAAe,SAAAzE,GACnB,IAAM0E,EAAiB5D,EAAQ6D,KAAK,SAAA1D,GAAM,OAAIA,EAAOjB,KAAOA,IAC7C4E,OAAOC,QAAP,gBAAA3E,OAA+BwE,EAAetD,KAA9C,OAEboD,EAAqBxE,GAAIL,KAAK,SAAAC,GAC5BsD,EAAWpC,EAAQgE,OAAO,SAAA7D,GAAM,OAAIA,EAAOjB,KAAOA,KAClDkE,EAAe,GAAAhE,OAAIwE,EAAetD,KAAnB,gBACf2D,WAAW,WACTb,EAAgB,OACf,QAKT,OACE3D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuE,EAAD,CAAQ1E,KAAK,oBACbC,EAAAC,EAAAC,cAACwE,EAAD,CAAcjD,QAASiC,EAAchC,WAAY,YACjD1B,EAAAC,EAAAC,cAACwE,EAAD,CAAcjD,QAASqC,EAAcpC,WAAY,UACjD1B,EAAAC,EAAAC,cAACyE,EAAD,CACE5E,KAAK,+BACLqB,MAAOkC,EACPjC,aA1BqB,SAAAuD,GACzBrB,EAAaqB,EAAMC,OAAOzD,UA2BxBpB,EAAAC,EAAAC,cAAC4E,EAAD,CAAW/E,KAAK,qBAChBC,EAAAC,EAAAC,cAAC6E,EAAD,CACElE,KAAK,SACLG,OAAO,WACPc,OAnGU,SAAA8C,GACdA,EAAMI,iBACN,IAAMC,EAAe1E,EAAQ6D,KAAK,SAAA1D,GAAM,OAAIA,EAAOG,OAASiC,IAE5D,GAAImC,GAAgBA,EAAajE,SAAWkC,GAI1C,GAHsBmB,OAAOC,QAAP,GAAA3E,OACjBmD,EADiB,yDAGH,CACjB,IAAMoC,EAAgB,CACpBzF,GAAIwF,EAAaxF,GACjBoB,KAAMoE,EAAapE,KACnBG,OAAQkC,GAEVe,EACUiB,GACP9F,KAAK,SAAAC,GACJsD,EACEpC,EACGgE,OAAO,SAAA7D,GAAM,OAAIA,EAAOjB,KAAOJ,EAASI,KACxCE,OAAON,IAEZsE,EAAe,iCAAAhE,OAA+BsF,EAAapE,KAA5C,MACfkC,EAAW,IACXI,EAAa,IACbqB,WAAW,WACTb,EAAgB,OACf,OAEJwB,MAAM,SAAAC,GACLrB,EAAe,cAAApE,OAAYsF,EAAapE,KAAzB,uBACfkC,EAAW,IACXI,EAAa,IACbqB,WAAW,WACTT,EAAgB,OACf,KACHpB,EAAWpC,EAAQgE,OAAO,SAAA7D,GAAM,OAAIA,EAAOG,OAASiC,YAGrD,IAAImC,EAET,YADAI,MAAK,GAAA1F,OAAIsF,EAAapE,KAAjB,uBAOLoD,EAJkB,CAChBpD,KAAMiC,EACN9B,OAAQkC,IAEsB9D,KAAK,SAAAC,GACnCsD,EAAWpC,EAAQZ,OAAON,IAC1BsE,EAAe,GAAAhE,OAAImD,EAAJ,iBACfC,EAAW,IACXI,EAAa,IACbqB,WAAW,WACTb,EAAgB,OACf,SA8CH5B,UAAWe,EACXd,WA1CmB,SAAA4C,GACvB7B,EAAW6B,EAAMC,OAAOzD,QA0CpBa,YAAaiB,EACbhB,aAxCqB,SAAA0C,GACzBzB,EAAayB,EAAMC,OAAOzD,UAyCxBpB,EAAAC,EAAAC,cAAC4E,EAAD,CAAW/E,KAAK,YAChBC,EAAAC,EAAAC,cAAA,WACwB,IAArBoD,EAAUgC,OACTtF,EAAAC,EAAAC,cAACqF,EAAD,CAAShF,QAASA,EAASC,YAAa0D,IAExClE,EAAAC,EAAAC,cAACqF,EAAD,CACEhF,QAASA,EAAQgE,OAAO,SAAA7D,GAAM,OAC5BA,EAAOG,KAAK2E,cAAcC,SAASnC,EAAUkC,iBAE/ChF,YAAa0D,OChLLwB,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjH,KAAK,SAAAkH,GACjCA,EAAaC","file":"static/js/main.715cd7e3.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = 'http://localhost:3001/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nconst create = personObject => {\n  const request = axios.post(baseUrl, personObject);\n  return request.then(response => response.data);\n};\n\nconst remove = id => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then(response => response.data);\n};\n\nconst update = personObject => {\n  const request = axios.put(`${baseUrl}/${personObject.id}`, personObject);\n  return request.then(response => response.data);\n};\n\nexport default { getAll, create, remove, update };\n","import React, { useState, useEffect } from 'react';\nimport personService from './services/persons';\n\nconst Header = ({ text }) => <h1>{text}</h1>;\n\nconst Subheader = ({ text }) => <h2>{text}</h2>;\n\nconst Persons = ({ persons, handleClick }) => {\n  return persons.map(person => (\n    <Person key={person.name} person={person} handleClick={handleClick} />\n  ));\n};\n\nconst Person = ({ person, handleClick }) => (\n  <div>\n    {person.name} {person.number}\n    <button onClick={() => handleClick(person.id)}>poista</button>\n  </div>\n);\n\nconst Filter = ({ text, value, handleChange }) => {\n  return (\n    <div>\n      {text} <input value={value} onChange={handleChange} />\n    </div>\n  );\n};\n\nconst Notification = ({ message, classToUse }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className={classToUse}>{message}</div>;\n};\n\nconst PersonForm = ({\n  name,\n  number,\n  submit,\n  nameValue,\n  nameChange,\n  numberValue,\n  numberChange\n}) => {\n  return (\n    <form onSubmit={submit}>\n      <div>\n        {name} <input value={nameValue} onChange={nameChange} />\n      </div>\n      <div>\n        {number} <input value={numberValue} onChange={numberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">lisää</button>\n      </div>\n    </form>\n  );\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [newFilter, setNewFilter] = useState('');\n  const [notification, setNotification] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then(response => {\n      setPersons(response);\n    });\n  }, []);\n\n  const addName = event => {\n    event.preventDefault();\n    const personExists = persons.find(person => person.name === newName);\n\n    if (personExists && personExists.number !== newNumber) {\n      const replaceNumber = window.confirm(\n        `${newName} on jo luettelossa, korvataanko vanha numero uudella`\n      );\n      if (replaceNumber) {\n        const updatedPerson = {\n          id: personExists.id,\n          name: personExists.name,\n          number: newNumber\n        };\n        personService\n          .update(updatedPerson)\n          .then(response => {\n            setPersons(\n              persons\n                .filter(person => person.id !== response.id)\n                .concat(response)\n            );\n            setNotification(`Numero muutettu henkilölle ${personExists.name}.`);\n            setNewName('');\n            setNewNumber('');\n            setTimeout(() => {\n              setNotification(null);\n            }, 3000);\n          })\n          .catch(error => {\n            setErrorMessage(`Henkilö ${personExists.name} oli jo poistettu.`);\n            setNewName('');\n            setNewNumber('');\n            setTimeout(() => {\n              setErrorMessage(null);\n            }, 3000);\n            setPersons(persons.filter(person => person.name !== newName));\n          });\n      }\n    } else if (personExists) {\n      alert(`${personExists.name} on jo luettelossa`);\n      return;\n    } else {\n      const newPerson = {\n        name: newName,\n        number: newNumber\n      };\n      personService.create(newPerson).then(response => {\n        setPersons(persons.concat(response));\n        setNotification(`${newName} lisätty.`);\n        setNewName('');\n        setNewNumber('');\n        setTimeout(() => {\n          setNotification(null);\n        }, 3000);\n      });\n    }\n  };\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilterChange = event => {\n    setNewFilter(event.target.value);\n  };\n\n  const removePerson = id => {\n    const personToRemove = persons.find(person => person.id === id);\n    const result = window.confirm(`Poistetaanko ${personToRemove.name}?`);\n    if (result) {\n      personService.remove(id).then(response => {\n        setPersons(persons.filter(person => person.id !== id));\n        setNotification(`${personToRemove.name} poistettu.`);\n        setTimeout(() => {\n          setNotification(null);\n        }, 3000);\n      });\n    }\n  };\n\n  return (\n    <div>\n      <Header text=\"Puhelinluettelo\" />\n      <Notification message={notification} classToUse={'message'} />\n      <Notification message={errorMessage} classToUse={'error'} />\n      <Filter\n        text=\"rajaa näytettäviä: \"\n        value={newFilter}\n        handleChange={handleFilterChange}\n      />\n      <Subheader text=\"Lisää uusi\" />\n      <PersonForm\n        name=\"nimi: \"\n        number=\"numero: \"\n        submit={addName}\n        nameValue={newName}\n        nameChange={handleNameChange}\n        numberValue={newNumber}\n        numberChange={handleNumberChange}\n      />\n      <Subheader text=\"Numerot\" />\n      <div>\n        {newFilter.length === 0 ? (\n          <Persons persons={persons} handleClick={removePerson} />\n        ) : (\n          <Persons\n            persons={persons.filter(person =>\n              person.name.toLowerCase().includes(newFilter.toLowerCase())\n            )}\n            handleClick={removePerson}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}